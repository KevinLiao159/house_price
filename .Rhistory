arrange(model.gbm.imp, desc(Overall))[1:10, ] %>%
ggplot(aes(x = predictor, y =coefficients )) + geom_density() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
ggtitle("predictor importance from GBM")
head(model.gbm.imp)
arrange(model.gbm.imp, desc(Overall))[1:10, ] %>%
ggplot(aes(x = predictor, y =Overall )) + geom_density() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
ggtitle("predictor importance from GBM")
png("images/model_gbm_predictor importance.png")
arrange(model.gbm.imp, desc(Overall))[1:10, ] %>%
ggplot(aes(x = predictor, y =Overall )) + geom_density() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
ggtitle("predictor importance from GBM")
arrange(model.gbm.imp, desc(Overall))[1:10, ] %>%
ggplot(aes(x = predictor, y =Overall )) + geom_density() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
ggtitle("predictor importance from GBM") + ylab("Importance")
arrange(model.gbm.imp, desc(Overall))[1:10, ] %>%
ggplot(aes(x = predictor, y =Overall )) + geom_density() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
ggtitle("predictor importance from GBM") + ylab("Importance")
dev.off()
dev.off()
arrange(model.gbm.imp, desc(Overall))[1:10, ] %>%
ggplot(aes(x = predictor, y =Overall )) + geom_density() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
ggtitle("predictor importance from GBM") + ylab("Importance")
png("images/model_gbm_predictor importance.png")
arrange(model.gbm.imp, desc(Overall))[1:10, ] %>%
ggplot(aes(x = predictor, y =Overall )) + geom_density() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
ggtitle("predictor importance from GBM") + ylab("Importance")
dev.off()
save(data.train.matrix, data.validation.matrix, file = "data/cleanedData/ddata_train_validation.matrix.RData")
# split into train, test matrix
load(file = "data/cleanedData/data.all.matrix.RData")
data.all.matrix <- as.data.frame(data.all.matrix)
data.train.matrix <- filter(data.all.matrix, data_type == "train")
data.train.matrix$data_type = NULL
set.seed(1000)
train_index = createDataPartition(data.train.matrix$SalePrice, p = 0.8, list = FALSE)
data.train.matrix = data.train.matrix[train_index, ]
data.validation.matrix = data.train.matrix[-train_index, ]
data.validation.matrix = arrange(data.validation.matrix, SalePrice)
data.test.matrix <- filter(data.all.matrix, data_type == "test")
data.test.matrix$data_type = NULL
save(data.train.matrix, data.validation.matrix, file = "data/cleanedData/ddata_train_validation.matrix.RData")
combined = rbind(model.lasso.df, model.ridge.df, model.rf.df, model.gbm.df)
combined$model = as.factor(combined$model)
ggplot(combined, aes(x = index, y = residual, color = model)) + geom_line() + facet_grid(~model) + ggtitle("Residul comparison")
model.lasso.pred <- predict(model.lasso,newx= as.matrix(select(data.validation.matrix, -SalePrice)),type="response",s= model.lasso.lambda.min)
model.lasso.df <- modify_dataframe_for_comparison(model.lasso.pred, 'Lasso')
model.ridge.pred <- predict(model.ridge,newx= as.matrix(select(data.validation.matrix, -SalePrice)),type="response",s= model.ridge.lambda.min)
model.ridge.df <- modify_dataframe_for_comparison(model.ridge.pred, 'Ridge')
model.gbm.pred <- predict(model.gbm, data.validation.matrix)
model.gbm.df <- modify_dataframe_for_comparison(model.gbm.pred, 'Gradient Boosting Machine')
model.rf.pred = predict(model.rf, data.validation.matrix)
model.rf.df <- modify_dataframe_for_comparison(model.rf.pred, 'Random Forest')
combined = rbind(model.lasso.df, model.ridge.df, model.rf.df, model.gbm.df)
combined$model = as.factor(combined$model)
png("images/model_residual_comparison.png", width = 1000, height = 300)
ggplot(combined, aes(x = index, y = residual, color = model)) + geom_line() + facet_grid(~model) + ggtitle("Residul comparison")
dev.off()
png("images/model_prediction_comparison.png", width = 1000, height = 300)
ggplot(combined, aes(x = y, y = pred, color = model)) + geom_point() + geom_smooth()  + facet_grid(~model) + ggtitle("Model prediction comparison")
dev.off()
get_rmse(model.lasso.pred, data.validation.matrix$SalePrice)
get_rmse(model.ridge.pred, data.validation.matrix$SalePrice)
get_rmse(model.gbm.pred, data.validation.matrix$SalePrice)
get_rmse(model.rf.pred, data.validation.matrix$SalePrice)
data.frame("RMSLE" = c(get_rmse(model.lasso.pred, data.validation.matrix$SalePrice), get_rmse(model.ridge.pred, data.validation.matrix$SalePrice), get_rmse(model.gbm.pred, data.validation.matrix$SalePrice), get_rmse(model.rf.pred, data.validation.matrix$SalePrice)))
data.frame("RMSLE" = c(get_rmse(model.lasso.pred, data.validation.matrix$SalePrice), get_rmse(model.ridge.pred, data.validation.matrix$SalePrice), get_rmse(model.gbm.pred, data.validation.matrix$SalePrice), get_rmse(model.rf.pred, data.validation.matrix$SalePrice)), 'model' = c("Lass", "Rige", "GBM", "RandomForest"))
model_comparison <- data.frame("RMSLE" = c(get_rmse(model.lasso.pred, data.validation.matrix$SalePrice), get_rmse(model.ridge.pred, data.validation.matrix$SalePrice), get_rmse(model.gbm.pred, data.validation.matrix$SalePrice), get_rmse(model.rf.pred, data.validation.matrix$SalePrice)), 'model' = c("Lass", "Rige", "GBM", "RandomForest"))
model_comparison
model_comparison <- data.frame("RMSLE" = c(get_rmse(model.rf.pred, data.validation.matrix$SalePrice), get_rmse(model.gbm.pred, data.validation.matrix$SalePrice), get_rmse(model.ridge.pred, data.validation.matrix$SalePrice), get_rmse(model.lasso.pred, data.validation.matrix$SalePrice)), 'model' = c("RandomForest", "GBM", "Rige", "Lass"))
model_comparison
model_comparison <- data.frame("RMSLE" = c(get_rmse(model.rf.pred, data.validation.matrix$SalePrice), get_rmse(model.gbm.pred, data.validation.matrix$SalePrice), get_rmse(model.ridge.pred, data.validation.matrix$SalePrice), get_rmse(model.lasso.pred, data.validation.matrix$SalePrice)), 'model' = c("RandomForest", "GBM", "Ridge", "Lass"))
model_comparison
head(data.all)
View(data.all)
ggplot(data.all, aes(x = YrSold)) + geom_histogram()
data.all
head(data.all)
library(dplyr)
library(ggplot2)
library(caret)
library(doMC)
library(stringr)
library(glmnet)
source("code/function/util.R")
# import dataset
data.train <- read.csv("data/rawData/train.csv")
data.test <- read.csv("data/rawData/test.csv")
data.sample <- read.csv("data/rawData/sample_submission.csv")
data.train = filter(data.all, data_type == 'train')
data.train$Id <- NULL
data.test$Id <- NULL
# add predictor called data_type
data.train$data_type <- "train"
data.test$data_type <- "test"
data.test$SalePrice <- 0
data.all <- rbind(data.train, data.test)
ggplot(data.all, aes(x = YrSold)) + geom_histogram()
ggplot(data.all, aes(x = MoSold)) + geom_histogram()
filter(data.all, data_type == 'train') %>%
ggplot(aes(x = SalePrice)) + geom_histogram()
filter(data.all, data_type == 'train') %>%
ggplot(aes(x = SalePrice)) + geom_histogram() + ggtitle("Original price histogram")
ggplot(aes(x = SalePrice)) + geom_histogram() + ggtitle("Original price histogram") + xlim('Price')
filter(data.all, data_type == 'train') %>%
ggplot(aes(x = SalePrice)) + geom_histogram() + ggtitle("Original price histogram") + xlim('Price')
png("images/historgram_original_price.png")
filter(data.all, data_type == 'train') %>%
ggplot(aes(x = SalePrice)) + geom_histogram() + ggtitle("Original house price histogram") + xlim('Price')
dev.off()
filter(data.all, data_type == 'train') %>%
ggplot(aes(x = SalePrice)) + geom_histogram()
# import dataset
data.train <- read.csv("data/rawData/train.csv")
data.test <- read.csv("data/rawData/test.csv")
data.sample <- read.csv("data/rawData/sample_submission.csv")
##################### prepocess #####################
data.train$Id <- NULL
data.test$Id <- NULL
# add predictor called data_type
data.train$data_type <- "train"
data.test$data_type <- "test"
data.test$SalePrice <- 0
# Scale log transform
data.train$SalePrice <- log(data.train$SalePrice + 1)
# remove outliers 17 points
data.train <- filter(data.train, 10.91511 < SalePrice, SalePrice < 13.17509)
# combine train, test
data.all <- rbind(data.train, data.test)
ggplot(data.train, aes(x = SalePrice)) + geom_histogram()
ggplot(data.train, aes(x = SalePrice)) + geom_histogram() + xlim(10.91511, 13.17509)
ggplot(data.train, aes(x = SalePrice)) + geom_histogram() + xlim(10.91511, 13.17509) ggtitle("Log transformed house price histogram") + xlim('log(Price)')
ggplot(data.train, aes(x = SalePrice)) + geom_histogram() + xlim(10.91511, 13.17509) ggtitle("Log transformed house price histogram") + xlim('log(Price)')
ggplot(data.train, aes(x = SalePrice)) + geom_histogram() + xlim(10.91511, 13.17509) + ggtitle("Log transformed house price histogram") + xlim('log(Price)')
png("images/historgram_log_trasformed_price.png")
ggplot(data.train, aes(x = SalePrice)) + geom_histogram() + xlim(10.91511, 13.17509) + ggtitle("Log transformed house price histogram") + xlim('log(Price)')
dev.off()
ggplot(data.train, aes(x = SalePrice)) + geom_histogram() + xlim(10.91511, 13.17509) + ggtitle("Log transformed house price histogram") + xlab('log(Price)')
png("images/historgram_log_trasformed_price.png")
ggplot(data.train, aes(x = SalePrice)) + geom_histogram() + xlim(10.91511, 13.17509) + ggtitle("Log transformed house price histogram") + xlab('log(Price)')
dev.off()
ggplot(data.train, aes(x = YrSold_YearRemodel, y = SalePrice)) + geom_point() + geom_smooth() + scale_y_log10()
library(caret)
library(glmnet)
library(xgboost)
source("script/function/util.R")
######################################### PCA #########################################
# load PCA RData
load('data/model/pca.RData')
png("images/model_pca_scree_plot.png")
plot(model.pca, type = 'l', main = "PCA Scree plot")
dev.off()
# 1st PC vs 2nd PC
png("images/model_pca_pc_comparison_plot.png")
qplot(model.pca$x[, 1], model.pca$x[, 2]) + ggtitle("1st PC vs 2nd PC") + xlab("1st PC") + ylab("2nd PC")
dev.off()
summary(model.pca)
######################################### lasso #########################################
# load lasso RData
load('data/model/lasso.RData')
# plot lasso lambda
png("images/model_lasso_lambda.png")
plot(model.lasso.lambda, main ='Lasso Lambda')
dev.off()
model.lasso.lambda.min
model.ridge.lambda.coeff <- as.data.frame.matrix(coef(model.ridge, s = model.ridge.lambda.min))
model.ridge.lambda.coeff$coefficent_name <- rownames(model.ridge.lambda.coeff)
rownames(model.ridge.lambda.coeff) <- NULL
colnames(model.ridge.lambda.coeff) <- c('coefficients', 'predictor')
filter(model.ridge.lambda.coeff, coefficients != 0) %>% nrow
######################################### ridge #########################################
# load ridge RData
load('data/model/ridge.RData')
# plot ridge lambda
png("images/model_ridge_lambda.png")
plot(model.ridge.lambda, main ='Ridge Lambda')
log(model.ridge.lambda.min)
dev.off()
# coefficient
model.lasso.lambda.coeff <- as.data.frame.matrix(coef(model.lasso, s = model.lasso.lambda.min))
model.lasso.lambda.coeff$coefficent_name <- rownames(model.lasso.lambda.coeff)
rownames(model.lasso.lambda.coeff) <- NULL
colnames(model.lasso.lambda.coeff) <- c('coefficients', 'predictor')
model.lasso.lambda.coeff.filterd <- filter(model.lasso.lambda.coeff, coefficients != 0)
model.lasso.lambda.coeff$coefficients_exist <- model.lasso.lambda.coeff$coefficients > 0
png("images/model_lasso_number_of_coefficients_left.png")
ggplot(model.lasso.lambda.coeff, aes(x = as.factor(coefficients_exist))) + geom_bar() + ggtitle("The number of cofficients left and removed") + xlab("The number of coefficients left")
dev.off()
png("images/model_lasso_coefficients_top_10.png")
arrange(model.lasso.lambda.coeff.filterd, desc(coefficients))[2:11, ] %>%
ggplot(aes(x = predictor, y =coefficients )) + geom_density() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
ggtitle("cofficient for top 10 predictors from Lasso")
dev.off()
# prediction
model.lasso.pred <- predict(model.lasso,newx= as.matrix(select(data.validation.matrix, -SalePrice)),type="response",s= model.lasso.lambda.min)
model.lasso.df <- modify_dataframe_for_comparison(model.lasso.pred, 'Lasso')
#
# ggplot(model.lasso.df, aes(x = 1:nrow(model.lasso.df), y = residual)) + geom_line()
# ggplot(model.lasso.df, aes(x = y, y= pred)) + geom_point() + geom_smooth()
# get_rmse(model.lasso.pred, data.validation.matrix$SalePrice)
######################################### ridge #########################################
model.ridge.pred <- predict(model.ridge,newx= as.matrix(select(data.validation.matrix, -SalePrice)),type="response",s= model.ridge.lambda.min)
model.ridge.df <- modify_dataframe_for_comparison(model.ridge.pred, 'Ridge')
model.ridge.lambda.coeff <- as.data.frame.matrix(coef(model.ridge, s = model.ridge.lambda.min))
model.ridge.lambda.coeff$coefficent_name <- rownames(model.ridge.lambda.coeff)
rownames(model.ridge.lambda.coeff) <- NULL
colnames(model.ridge.lambda.coeff) <- c('coefficients', 'predictor')
png("images/model_ridge_coefficients_top_10.png")
arrange(model.ridge.lambda.coeff, desc(coefficients))[2:11, ] %>%
ggplot(aes(x = predictor, y =coefficients )) + geom_density() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
ggtitle("cofficient for top 10 predictors from Ridge")
dev.off()
ggplot(model.ridge.df, aes(x = y, y= pred)) + geom_point() + geom_smooth()
ggplot(model.ridge.df, aes(x = 1:nrow(model.ridge.df), y = residual)) + geom_line()
get_rmse(model.ridge.pred, data.validation.matrix$SalePrice)
######################################### gbm #########################################
# load gbm RData
load('data/model/gbm.RData')
# model importance
plot(varImp(model.gbm))
model.gbm.imp <- varImp(model.gbm)$importance
model.gbm.imp$predictor <- rownames(model.gbm.imp)
png("images/model_gbm_predictor importance.png")
arrange(model.gbm.imp, desc(Overall))[1:10, ] %>%
ggplot(aes(x = predictor, y =Overall )) + geom_density() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
ggtitle("predictor importance from GBM") + ylab("Importance")
dev.off()
# prediction
model.gbm.pred <- predict(model.gbm, data.validation.matrix)
model.gbm.df <- modify_dataframe_for_comparison(model.gbm.pred, 'Gradient Boosting Machine')
ggplot(model.gbm.df, aes(x = y, y= pred)) + geom_point() + geom_smooth()
ggplot(model.gbm.df, aes(x = 1:nrow(model.gbm.df), y = residual)) + geom_line()
get_rmse(model.gbm.pred, data.validation.matrix$SalePrice)
#### random forest
#########################################  load random forest RData #########################################
load('data/model/rf.RData')
# prediction
model.rf.pred = predict(model.rf, data.validation.matrix)
model.rf.df <- modify_dataframe_for_comparison(model.rf.pred, 'Random Forest')
ggplot(model.rf.df, aes(x = y, y= pred)) + geom_point() + geom_smooth()
ggplot(model.rf.df, aes(x = 1:nrow(model.rf.df), y = residual)) + geom_line()
get_rmse(model.rf.pred, data.validation.matrix$SalePrice)
# combine
combined = rbind(model.lasso.df, model.ridge.df, model.rf.df, model.gbm.df)
combined$model = as.factor(combined$model)
png("images/model_residual_comparison.png", width = 1000, height = 300)
ggplot(combined, aes(x = index, y = residual, color = model)) + geom_line() + facet_grid(~model) + ggtitle("Residul comparison")
dev.off()
png("images/model_prediction_comparison.png", width = 1000, height = 300)
ggplot(combined, aes(x = y, y = pred, color = model)) + geom_point() + geom_smooth()  + facet_grid(~model) + ggtitle("Model prediction comparison")
dev.off()
##################### RMSE comparison
model_comparison <- data.frame("RMSLE" = c(get_rmse(model.rf.pred, data.validation.matrix$SalePrice), get_rmse(model.gbm.pred, data.validation.matrix$SalePrice), get_rmse(model.ridge.pred, data.validation.matrix$SalePrice), get_rmse(model.lasso.pred, data.validation.matrix$SalePrice)), 'model' = c("RandomForest", "GBM", "Ridge", "Lasso"))
model_comparison
ggplot(data.train, aes(x = YrSold_YearRemodel, y = SalePrice)) + geom_point() + geom_smooth() + scale_y_log10()
ggplot(data.train, aes(x = YrSold_YearRemodel, y = SalePrice)) + geom_point() + geom_smooth() + scale_y_log10()
library(dplyr)
library(ggplot2)
library(caret)
library(doMC)
library(stringr)
library(glmnet)
source("code/function/util.R")
# import dataset
data.train <- read.csv("data/rawData/train.csv")
data.test <- read.csv("data/rawData/test.csv")
data.sample <- read.csv("data/rawData/sample_submission.csv")
##################### prepocess #####################
data.train$Id <- NULL
data.test$Id <- NULL
# add predictor called data_type
data.train$data_type <- "train"
data.test$data_type <- "test"
data.test$SalePrice <- 0
# Scale log transform
data.train$SalePrice <- log(data.train$SalePrice + 1)
# remove outliers 17 points
data.train <- filter(data.train, 10.91511 < SalePrice, SalePrice < 13.17509)
# combine train, test
data.all <- rbind(data.train, data.test)
data.train$data_type <- as.factor(data.train$data_type)
# sold - built
data.all$YrSold_YearBuilt <- data.all$YrSold - data.all$YearBuilt
# Remodel - built
data.all$YearRemodel_YearBuilt <- data.all$YearRemodAdd - data.all$YearBuilt
# sold - remodel
data.all$YrSold_YearRemodel <- data.all$YrSold - data.all$YearRemodAdd
head(data.all)
# factorize
data.all$MSSubClass <- as.factor(data.all$MSSubClass)
data.all$YearBuilt <- as.factor(data.all$YearBuilt)
data.all$YrSold <- as.factor(data.all$YrSold)
data.all$MoSold <- as.factor(data.all$MoSold)
data.all$GarageYrBlt <- as.factor(data.all$GarageYrBlt)
# convert NAs to factor
data.all <- convert_na_to_factor(data.all)
# add number of nones
data.all$num_none <- get_number_none(data.all)
# add existance
data.all$pool_exist <- as.factor(data.all$PoolArea != 0)
data.all$garage_exist <- as.factor(data.all$GarageArea != 0)
data.all$masVnrArea_exist <- as.factor(data.all$MasVnrArea != 0)
# # kmeans using areas
# set.seed(11)
# data.area <- select(data.all, LotArea, GrLivArea)
# scaled_data = as.data.frame(scale(data.area))
# data.model.kmeans = kmeans(scaled_data, centers = 10)
#
# data.all$cluster <- as.factor(data.model.kmeans$cluster)
# scaled_data$cluster <- as.factor(data.model.kmeans$cluster)
#
# data.all$cluster_dist = 0
# for (i in 1:nrow(data.all)) {
#
#   data.all$cluster_dist[i] = dist(rbind( select(scaled_data[i, ], -cluster), data.model.kmeans$centers[scaled_data[i, ]$cluster, ] ))
#
# }
# add log term for area related predictors
data.all$LotArea <- log(data.all$LotArea + 1)
data.all$GrLivArea <- log(data.all$GrLivArea + 1)
data_type <- data.all$data_type
data.all$data_type <- NULL
data.all.matrix <- as.data.frame(model.matrix( ~ ., data = data.all))
data.all.matrix$`(Intercept)` <- NULL
data.all.matrix$data_type <- data_type
# save RData
save(data.all, file = "data/cleanedData/data.all.RData")
save(data.all.matrix, file = "data/cleanedData/data.all.matrix.RData")
df
ggplot(data.train, aes(x = YrSold_YearRemodel, y = SalePrice)) + geom_point() + geom_smooth() + scale_y_log10()
head(data.train)
library(dplyr)
library(ggplot2)
library(caret)
library(doMC)
library(stringr)
library(glmnet)
source("code/function/util.R")
# import dataset
data.train <- read.csv("data/rawData/train.csv")
data.test <- read.csv("data/rawData/test.csv")
data.sample <- read.csv("data/rawData/sample_submission.csv")
##################### prepocess #####################
data.train$Id <- NULL
data.test$Id <- NULL
# add predictor called data_type
data.train$data_type <- "train"
data.test$data_type <- "test"
data.test$SalePrice <- 0
# Scale log transform
data.train$SalePrice <- log(data.train$SalePrice + 1)
# remove outliers 17 points
data.train <- filter(data.train, 10.91511 < SalePrice, SalePrice < 13.17509)
# combine train, test
data.all <- rbind(data.train, data.test)
data.train$data_type <- as.factor(data.train$data_type)
# sold - built
data.all$YrSold_YearBuilt <- data.all$YrSold - data.all$YearBuilt
# Remodel - built
data.all$YearRemodel_YearBuilt <- data.all$YearRemodAdd - data.all$YearBuilt
# sold - remodel
data.all$YrSold_YearRemodel <- data.all$YrSold - data.all$YearRemodAdd
head(data.all)
# factorize
data.all$MSSubClass <- as.factor(data.all$MSSubClass)
data.all$YearBuilt <- as.factor(data.all$YearBuilt)
data.all$YrSold <- as.factor(data.all$YrSold)
data.all$MoSold <- as.factor(data.all$MoSold)
data.all$GarageYrBlt <- as.factor(data.all$GarageYrBlt)
# convert NAs to factor
data.all <- convert_na_to_factor(data.all)
# add number of nones
data.all$num_none <- get_number_none(data.all)
# add existance
data.all$pool_exist <- as.factor(data.all$PoolArea != 0)
data.all$garage_exist <- as.factor(data.all$GarageArea != 0)
data.all$masVnrArea_exist <- as.factor(data.all$MasVnrArea != 0)
# # kmeans using areas
# set.seed(11)
# data.area <- select(data.all, LotArea, GrLivArea)
# scaled_data = as.data.frame(scale(data.area))
# data.model.kmeans = kmeans(scaled_data, centers = 10)
#
# data.all$cluster <- as.factor(data.model.kmeans$cluster)
# scaled_data$cluster <- as.factor(data.model.kmeans$cluster)
#
# data.all$cluster_dist = 0
# for (i in 1:nrow(data.all)) {
#
#   data.all$cluster_dist[i] = dist(rbind( select(scaled_data[i, ], -cluster), data.model.kmeans$centers[scaled_data[i, ]$cluster, ] ))
#
# }
# add log term for area related predictors
data.all$LotArea <- log(data.all$LotArea + 1)
data.all$GrLivArea <- log(data.all$GrLivArea + 1)
data_type <- data.all$data_type
data.all$data_type <- NULL
data.all.matrix <- as.data.frame(model.matrix( ~ ., data = data.all))
data.all.matrix$`(Intercept)` <- NULL
data.all.matrix$data_type <- data_type
# save RData
save(data.all, file = "data/cleanedData/data.all.RData")
save(data.all.matrix, file = "data/cleanedData/data.all.matrix.RData")
df
ggplot(data.train, aes(x = YrSold_YearRemodel, y = SalePrice)) + geom_point() + geom_smooth() + scale_y_log10()
library(dplyr)
library(dplyr)
library(ggplot2)
library(caret)
library(doMC)
library(stringr)
library(glmnet)
source("code/function/util.R")
# import dataset
data.train <- read.csv("data/rawData/train.csv")
data.test <- read.csv("data/rawData/test.csv")
data.sample <- read.csv("data/rawData/sample_submission.csv")
##################### prepocess #####################
data.train$Id <- NULL
data.test$Id <- NULL
data.train$data_type <- "train"
data.test$data_type <- "test"
data.test$SalePrice <- 0
# Scale log transform
data.train$SalePrice <- log(data.train$SalePrice + 1)
# remove outliers 17 points
data.train <- filter(data.train, 10.91511 < SalePrice, SalePrice < 13.17509)
# combine train, test
data.all <- rbind(data.train, data.test)
data.train$data_type <- as.factor(data.train$data_type)
# sold - built
data.all$YrSold_YearBuilt <- data.all$YrSold - data.all$YearBuilt
# Remodel - built
data.all$YearRemodel_YearBuilt <- data.all$YearRemodAdd - data.all$YearBuilt
# sold - remodel
data.all$YrSold_YearRemodel <- data.all$YrSold - data.all$YearRemodAdd
head(data.all)
# factorize
data.all$MSSubClass <- as.factor(data.all$MSSubClass)
data.all$YearBuilt <- as.factor(data.all$YearBuilt)
data.all$YrSold <- as.factor(data.all$YrSold)
data.all$MoSold <- as.factor(data.all$MoSold)
data.all$GarageYrBlt <- as.factor(data.all$GarageYrBlt)
# convert NAs to factor
data.all <- convert_na_to_factor(data.all)
# add number of nones
data.all$num_none <- get_number_none(data.all)
# add existance
data.all$pool_exist <- as.factor(data.all$PoolArea != 0)
data.all$garage_exist <- as.factor(data.all$GarageArea != 0)
data.all$masVnrArea_exist <- as.factor(data.all$MasVnrArea != 0)
# # kmeans using areas
data.all$LotArea <- log(data.all$LotArea + 1)
data.all$GrLivArea <- log(data.all$GrLivArea + 1)
ggplot(data.train, aes(x = YrSold_YearRemodel, y = SalePrice)) + geom_point() + geom_smooth() + scale_y_log10()
data_type <- data.all$data_type
data.all$data_type <- NULL
data.all.matrix <- as.data.frame(model.matrix( ~ ., data = data.all))
data.all.matrix$`(Intercept)` <- NULL
data.all.matrix$data_type <- data_type
ggplot(data.train, aes(x = YrSold_YearRemodel, y = SalePrice)) + geom_point() + geom_smooth() + scale_y_log10()
data.all$YearRemodel_YearBuilt <- data.all$YearRemodAdd - data.all$YearBuilt
ggplot(data.train, aes(x = YrSold_YearBuilt, y = SalePrice)) + geom_point() + geom_smooth() +  scale_y_log10() + xlim(0, 100)
data.train = filter(data.all, data_type == 'train')
ggplot(data.train, aes(x = YrSold_YearRemodel, y = SalePrice)) + geom_point() + geom_smooth() + scale_y_log10()
ggplot(data.train, aes(x = YrSold_YearRemodel, y = SalePrice)) + geom_point() + geom_smooth() + scale_y_log10() + xlim(0, 20)
ggplot(data.train, aes(x = YrSold_YearRemodel, y = SalePrice)) + geom_point() + geom_smooth() + scale_y_log10() + xlim(21, 40)
ggplot(data.train, aes(x = YrSold_YearRemodel, y = SalePrice)) + geom_point() + geom_smooth() + scale_y_log10() + xlim(41, 60)
ggplot(data.train, aes(x = YrSold_YearRemodel, y = SalePrice)) + geom_point() + geom_smooth() + scale_y_log10() + xlab("Year sold - Year remodeled")
ggplot(data.train, aes(x = YrSold_YearRemodel, y = SalePrice)) + geom_point() + geom_smooth() + scale_y_log10() + xlab("Year sold - Year remodeled") + ggtitle("Year sold - Year remodeled Vs Price")
png("images/scatter_Year sold_Year_remodeled_Vs_Price.png")
ggplot(data.train, aes(x = YrSold_YearRemodel, y = SalePrice)) + geom_point() + geom_smooth() + scale_y_log10() + xlab("Year sold - Year remodeled") + ggtitle("Year sold - Year remodeled vs Price")
dev.off()
ggplot(data.train, aes(x = YrSold_YearBuilt, y = SalePrice)) + geom_point() + geom_smooth() +  scale_y_log10() + xlim(0, 100)
png("images/scatter_Year_sold_Year_remodeled_Vs_Price.png")
ggplot(data.train, aes(x = YrSold_YearRemodel, y = SalePrice)) + geom_point() + geom_smooth() + scale_y_log10() + xlab("Year sold - Year remodeled") + ggtitle("Year sold - Year remodeled vs Price")
dev.off()
ggplot(data.train, aes(x = YrSold_YearBuilt, y = SalePrice)) + geom_point() + geom_smooth() +  scale_y_log10() + xlim(0, 100)  + xlab("Year sold - Year built") + ggtitle("Year sold - Year built vs Price")
png("images/scatter_Year_sold_Year_built_Vs_Price.png")
ggplot(data.train, aes(x = YrSold_YearBuilt, y = SalePrice)) + geom_point() + geom_smooth() +  scale_y_log10() + xlim(0, 100)  + xlab("Year sold - Year built") + ggtitle("Year sold - Year built vs Price")
dev.off()
m
group_by(data.train, YrSold_YearRemodel) %>% summarise(mean(SalePrice)) %>% View
ggplot(data.tmp, aes(x = SalePrice, fill = factor(MiscFeature_exist))) + geom_histogram(position="dodge", bins = 500)
model_comparison
model_comparison <- data.frame("RMSLE" = c(get_rmse(model.rf.pred, data.validation.matrix$SalePrice), get_rmse(model.gbm.pred, data.validation.matrix$SalePrice), get_rmse(model.ridge.pred, data.validation.matrix$SalePrice), get_rmse(model.lasso.pred, data.validation.matrix$SalePrice)), 'model' = c("RandomForest", "GBM", "Ridge", "Lasso"))
load('data/model/lasso.RData')
model.ridge.lambda.coeff <- as.data.frame.matrix(coef(model.ridge, s = model.ridge.lambda.min))
model.ridge.lambda.coeff$coefficent_name <- rownames(model.ridge.lambda.coeff)
load('data/model/ridge.RData')
model.lasso.pred <- predict(model.lasso,newx= as.matrix(select(data.validation.matrix, -SalePrice)),type="response",s= model.lasso.lambda.min)
model.lasso.df <- modify_dataframe_for_comparison(model.lasso.pred, 'Lasso')
model.lasso.pred <- predict(model.lasso,newx= as.matrix(select(data.validation.matrix, -SalePrice)),type="response",s= model.lasso.lambda.min)
load('data/model/ridge.RData')
load('data/model/lasso.RData')
model.lasso.pred <- predict(model.lasso,newx= as.matrix(select(data.validation.matrix, -SalePrice)),type="response",s= model.lasso.lambda.min)
load('data/cleanedData/ddata_train_validation.matrix.RData')
model.lasso.pred <- predict(model.lasso,newx= as.matrix(select(data.validation.matrix, -SalePrice)),type="response",s= model.lasso.lambda.min)
model.lasso.df <- modify_dataframe_for_comparison(model.lasso.pred, 'Lasso')
model.ridge.pred <- predict(model.ridge,newx= as.matrix(select(data.validation.matrix, -SalePrice)),type="response",s= model.ridge.lambda.min)
model.ridge.df <- modify_dataframe_for_comparison(model.ridge.pred, 'Ridge')
model.gbm.pred <- predict(model.gbm, data.validation.matrix)
model.gbm.df <- modify_dataframe_for_comparison(model.gbm.pred, 'Gradient Boosting Machine')
o
load('data/model/gbm.RData')
model.gbm.pred <- predict(model.gbm, data.validation.matrix)
model.gbm.df <- modify_dataframe_for_comparison(model.gbm.pred, 'Gradient Boosting Machine')
load('data/model/rf.RData')
model.rf.pred = predict(model.rf, data.validation.matrix)
model.rf.df <- modify_dataframe_for_comparison(model.rf.pred, 'Random Forest')
model_comparison <- data.frame("RMSLE" = c(get_rmse(model.rf.pred, data.validation.matrix$SalePrice), get_rmse(model.gbm.pred, data.validation.matrix$SalePrice), get_rmse(model.ridge.pred, data.validation.matrix$SalePrice), get_rmse(model.lasso.pred, data.validation.matrix$SalePrice)), 'model' = c("RandomForest", "GBM", "Ridge", "Lasso"))
model_comparison
save(model_comparison, file = "data/cleanedData/RMSEL_Table.RData")
