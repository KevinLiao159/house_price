data.train = read.csv("rawData/train.csv")
data.test = read.csv("rawData/test.csv")
data.sample = read.csv("rawData/sample_submission.csv")
##################### prepocess #####################
data.train$Id <- NULL
data.test$Id <- NULL
# combine train, test
data.train$data_type = "train"
data.test$data_type = "test"
data.test$SalePrice = 0
data.all = rbind(data.train, data.test)
data.train$data_type = as.factor(data.train$data_type)
# indicates the ages of building built, sold
data.all$YearBuilt_age = abs(max(data.all$YearBuilt) - data.all$YearBuilt)
data.all$YrSold_age = abs(max(data.all$YrSold) - data.all$YrSold)
# factorize
data.all$MSSubClass = as.factor(data.all$MSSubClass)
data.all$YearBuilt = as.factor(data.all$YearBuilt)
data.all$YrSold = as.factor(data.all$YrSold)
data.all$GarageYrBlt = as.factor(data.all$GarageYrBlt)
# convert NAs to factor
data.all = convert_na_to_factor(data.all)
# add number of nones
data.all$num_none = get_number_none(data.all)
data.all$pool_exist = as.factor(data.all$PoolArea != 0)
data.all$garage_exist = as.factor(data.all$GarageArea != 0)
data.all$masVnrArea_exist = as.factor(data.all$MasVnrArea != 0)
# kmeans using areas
set.seed(11)
data.area <- select(data.all, LotArea, GrLivArea)
scaled_data = as.data.frame(scale(data.area))
data.model.kmeans = kmeans(scaled_data, centers = 10)
data.all$cluster <- as.factor(data.model.kmeans$cluster)
scaled_data$cluster <- as.factor(data.model.kmeans$cluster)
data.all$cluster_dist = 0
for (i in 1:nrow(data.all)) {
data.all$cluster_dist[i] = dist(rbind( select(scaled_data[i, ], -cluster), data.model.kmeans$centers[scaled_data[i, ]$cluster, ] ))
}
# add log term for area related predictors
data.all$LotArea_log = log(data.all$LotArea + 1)
data.all$GrLivArea_log = log(data.all$GrLivArea + 1)
data_type = data.all$data_type
data.all$data_type = NULL
data.all.matrix = as.data.frame(model.matrix( ~ ., data = data.all))
data.all.matrix$data_type = data_type
data.train.matrix <- filter(data.all.matrix, data_type == "train")
data.train.matrix$data_type = NULL
data.test.matrix <- filter(data.all.matrix, data_type == "test")
data.test.matrix$data_type = NULL
model.lasso<- train(SalePrice ~., data =  data.train.matrix , method = 'lasso')
model.lasso<- train(SalePrice ~., data =  data.train.matrix , method = 'ridge')
model.gbm5<- train(SalePrice ~., data =  data.train.matrix , method = 'gbm')
model.gbm5
library(dplyr)
library(ggplot2)
library(caret)
library(doMC)
library(stringr)
registerDoMC(cores = 7)
source("script/util.R")
# import dataset
data.train = read.csv("rawData/train.csv")
data.test = read.csv("rawData/test.csv")
data.sample = read.csv("rawData/sample_submission.csv")
##################### prepocess #####################
data.train$Id <- NULL
data.test$Id <- NULL
# combine train, test
data.train$data_type = "train"
data.test$data_type = "test"
data.test$SalePrice = 0
data.all = rbind(data.train, data.test)
data.train$data_type = as.factor(data.train$data_type)
# indicates the ages of building built, sold
data.all$YearBuilt_age = abs(max(data.all$YearBuilt) - data.all$YearBuilt)
data.all$YrSold_age = abs(max(data.all$YrSold) - data.all$YrSold)
# factorize
data.all$MSSubClass = as.factor(data.all$MSSubClass)
data.all$YearBuilt = as.factor(data.all$YearBuilt)
data.all$YrSold = as.factor(data.all$YrSold)
data.all$GarageYrBlt = as.factor(data.all$GarageYrBlt)
# convert NAs to factor
data.all = convert_na_to_factor(data.all)
# add number of nones
data.all$num_none = get_number_none(data.all)
data.all$pool_exist = as.factor(data.all$PoolArea != 0)
data.all$garage_exist = as.factor(data.all$GarageArea != 0)
data.all$masVnrArea_exist = as.factor(data.all$MasVnrArea != 0)
# kmeans using areas
set.seed(11)
data.area <- select(data.all, LotArea, GrLivArea)
scaled_data = as.data.frame(scale(data.area))
data.model.kmeans = kmeans(scaled_data, centers = 10)
data.all$cluster <- as.factor(data.model.kmeans$cluster)
scaled_data$cluster <- as.factor(data.model.kmeans$cluster)
data.all$cluster_dist = 0
for (i in 1:nrow(data.all)) {
data.all$cluster_dist[i] = dist(rbind( select(scaled_data[i, ], -cluster), data.model.kmeans$centers[scaled_data[i, ]$cluster, ] ))
}
# add log term for area related predictors
data.all$LotArea_log = log(data.all$LotArea + 1)
data.all$GrLivArea_log = log(data.all$GrLivArea + 1)
data.all$SalePrice = log(data.all$SalePrice + 1)
data_type = data.all$data_type
data.all$data_type = NULL
data.all.matrix = as.data.frame(model.matrix( ~ ., data = data.all))
data.all.matrix$data_type = data_type
library(caret)
library(glmnet)
library(xgboost)
data.train.matrix <- filter(data.all.matrix, data_type == "train")
data.train.matrix$data_type = NULL
data.test.matrix <- filter(data.all.matrix, data_type == "test")
data.test.matrix$data_type = NULL
# setup fitcontrol
fitControl <- trainControl(method = "repeatedcv", number = 7, repeats = 3)
# gbm
model.gbm5<- train(SalePrice ~., data =  data.train.matrix , method = 'gbm')
model.gbm5
library(dplyr)
library(ggplot2)
library(caret)
library(doMC)
library(stringr)
registerDoMC(cores = 7)
source("script/util.R")
# import dataset
data.train = read.csv("rawData/train.csv")
data.test = read.csv("rawData/test.csv")
data.sample = read.csv("rawData/sample_submission.csv")
##################### prepocess #####################
data.train$Id <- NULL
data.test$Id <- NULL
# combine train, test
data.train$data_type = "train"
data.test$data_type = "test"
data.test$SalePrice = 0
data.all = rbind(data.train, data.test)
data.train$data_type = as.factor(data.train$data_type)
# indicates the ages of building built, sold
data.all$YearBuilt_age = abs(max(data.all$YearBuilt) - data.all$YearBuilt)
data.all$YrSold_age = abs(max(data.all$YrSold) - data.all$YrSold)
# factorize
data.all$MSSubClass = as.factor(data.all$MSSubClass)
data.all$YearBuilt = as.factor(data.all$YearBuilt)
data.all$YrSold = as.factor(data.all$YrSold)
data.all$GarageYrBlt = as.factor(data.all$GarageYrBlt)
# convert NAs to factor
data.all = convert_na_to_factor(data.all)
# add number of nones
data.all$num_none = get_number_none(data.all)
data.all$pool_exist = as.factor(data.all$PoolArea != 0)
data.all$garage_exist = as.factor(data.all$GarageArea != 0)
data.all$masVnrArea_exist = as.factor(data.all$MasVnrArea != 0)
# kmeans using areas
set.seed(11)
data.area <- select(data.all, LotArea, GrLivArea)
scaled_data = as.data.frame(scale(data.area))
data.model.kmeans = kmeans(scaled_data, centers = 10)
data.all$cluster <- as.factor(data.model.kmeans$cluster)
scaled_data$cluster <- as.factor(data.model.kmeans$cluster)
data.all$cluster_dist = 0
for (i in 1:nrow(data.all)) {
data.all$cluster_dist[i] = dist(rbind( select(scaled_data[i, ], -cluster), data.model.kmeans$centers[scaled_data[i, ]$cluster, ] ))
}
# add log term for area related predictors
data.all$LotArea_log = log(data.all$LotArea + 1)
data.all$GrLivArea_log = log(data.all$GrLivArea + 1)
data.all$SalePrice = log(data.all$SalePrice + 1)
data.train <- filter(data.all, data_type == "train")
data.train$data_type = NULL
data.test <- filter(data.all, data_type == "test")
data.test$data_type = NULL
fitControl <- trainControl(method = "repeatedcv", number = 7, repeats = 3)
model.gbm6<- train(SalePrice ~., data =  data.train, method = 'gbm')
model.gbm6
model.gbm6
model.gbm5
library(dplyr)
library(ggplot2)
library(caret)
library(doMC)
library(stringr)
registerDoMC(cores = 7)
source("script/util.R")
# import dataset
data.train = read.csv("rawData/train.csv")
data.test = read.csv("rawData/test.csv")
data.sample = read.csv("rawData/sample_submission.csv")
##################### prepocess #####################
data.train$Id <- NULL
data.test$Id <- NULL
# combine train, test
data.train$data_type = "train"
data.test$data_type = "test"
data.test$SalePrice = 0
data.all = rbind(data.train, data.test)
data.train$data_type = as.factor(data.train$data_type)
# indicates the ages of building built, sold
data.all$YearBuilt_age = abs(max(data.all$YearBuilt) - data.all$YearBuilt)
data.all$YrSold_age = abs(max(data.all$YrSold) - data.all$YrSold)
# factorize
data.all$MSSubClass = as.factor(data.all$MSSubClass)
data.all$YearBuilt = as.factor(data.all$YearBuilt)
data.all$YrSold = as.factor(data.all$YrSold)
data.all$GarageYrBlt = as.factor(data.all$GarageYrBlt)
# convert NAs to factor
data.all = convert_na_to_factor(data.all)
# add number of nones
data.all$num_none = get_number_none(data.all)
data.all$pool_exist = as.factor(data.all$PoolArea != 0)
data.all$garage_exist = as.factor(data.all$GarageArea != 0)
data.all$masVnrArea_exist = as.factor(data.all$MasVnrArea != 0)
# kmeans using areas
set.seed(11)
data.area <- select(data.all, LotArea, GrLivArea)
scaled_data = as.data.frame(scale(data.area))
data.model.kmeans = kmeans(scaled_data, centers = 10)
data.all$cluster <- as.factor(data.model.kmeans$cluster)
scaled_data$cluster <- as.factor(data.model.kmeans$cluster)
data.all$cluster_dist = 0
for (i in 1:nrow(data.all)) {
data.all$cluster_dist[i] = dist(rbind( select(scaled_data[i, ], -cluster), data.model.kmeans$centers[scaled_data[i, ]$cluster, ] ))
}
# add log term for area related predictors
data.all$LotArea_log = log(data.all$LotArea + 1)
data.all$GrLivArea_log = log(data.all$GrLivArea + 1)
data.all$SalePrice = log(data.all$SalePrice + 1)
data_type = data.all$data_type
data.all$data_type = NULL
data.all.matrix = as.data.frame(model.matrix( ~ ., data = data.all))
data.all.matrix$data_type = data_type
data.train.matrix <- filter(data.all.matrix, data_type == "train")
data.train.matrix$data_type = NULL
data.test.matrix <- filter(data.all.matrix, data_type == "test")
data.test.matrix$data_type = NULL
fitControl <- trainControl(method = "repeatedcv", number = 7, repeats = 3)
gbmGrid3 <- expand.grid(interaction.depth = c(1, 3, 5),
n.trees = c(5, 6)*50,
shrinkage = c(0.1),
n.minobsinnode = c(15, 20))
# gbm
model.gbm6<- train(SalePrice ~., data =  data.train.matrix, method = 'gbm', tuneGrid = gbmGrid3)
model.gbm6
models <- caretList(iris[1:50,1:2], iris[1:50,3], methodList=c("glm", "lm"))
ens <- caretEnsemble(models)
summary(ens)
install.packages("caretEnsemble")
models <- caretList(iris[1:50,1:2], iris[1:50,3], methodList=c("glm", "lm"))
ens <- caretEnsemble(models)
summary(ens)
models <- caretList(iris[1:50,1:2], iris[1:50,3], methodList=c("glm", "lm"))
library(caretEnsemble)
models <- caretList(iris[1:50,1:2], iris[1:50,3], methodList=c("glm", "lm"))
models <- caretList(iris[1:50,1:2], iris[1:50,3], methodList=c("glm", "lm"))
models
ens <- caretEnsemble(models)
summary(ens)
iris[1:50,1:2]
?caretList
models <- caretList(SalePrice ~., data =  data.train.matrix, methodList=c("gbm", "glm"))
models
models
ens <- caretEnsemble(models)
summary(ens)
ens = caretStack(models, method="glm")
summary(ens)
ens
meta_model <- caretStack(models, method="lm", trControl=trainControl(method="cv"))
dotplot.caretStack(meta_model)
meta_model <- caretStack(models, method="lm", trControl=trainControl(method="cv"))
meta_model
models <- caretList(SalePrice ~., data =  data.train.matrix, tuneList=list(
gbm=caretModelSpec(method="gbm", trace=FALSE, tuneLength=1)
))
?write.csv
write.csv(data.train.matrix, "cleanedData/data.train.matrix.csv", row.names = F)
write.csv(data.test.matrix, "cleanedData/data.test.matrix.csv", row.names = F)
data.train.matrix = read.csv("cleanedData/data.train.matrix.csv")
fitControl <- trainControl(method = "repeatedcv", number = 7, repeats = 3)
# param
gbmGrid3 <- expand.grid(interaction.depth = c(1, 3, 5),
n.trees = c(5, 6)*50,
shrinkage = c(0.1),
n.minobsinnode = c(15, 20))
# gbm
model.gbm6<- train(SalePrice ~., data =  data.train.matrix, method = 'gbm', tuneGrid = gbmGrid3)
data.train.matrix = read.csv("cleanedData/data.train.matrix2.csv")
fitControl <- trainControl(method = "repeatedcv", number = 7, repeats = 3)
# param
gbmGrid3 <- expand.grid(interaction.depth = c(1, 3, 5),
n.trees = c(5, 6)*50,
shrinkage = c(0.1),
n.minobsinnode = c(15, 20))
# gbm
model.gbm6<- train(SalePrice ~., data =  data.train.matrix, method = 'gbm', tuneGrid = gbmGrid3)
data.train.matrix = read.csv("cleanedData/data.train.matrix2.csv")
head(data.train.matrix)
data.train.matrix$SalePrice
data.train.matrix = read.csv("cleanedData/data.train.matrix2.csv")
model.gbm6<- train(SalePrice ~., data =  data.train.matrix, method = 'gbm', tuneGrid = gbmGrid3)
model.gbm6
model.gbm6
fitControl <- trainControl(method = "repeatedcv", number = 7, repeats = 3)
# param
gbmGrid3 <- expand.grid(interaction.depth = c(1, 3, 5),
n.trees = c(4, 5, 6, 7)*50,
shrinkage = c(0.1, 0.2),
n.minobsinnode = c(10, 15, 20))
model.gbm6<- train(SalePrice ~., data =  data.train.matrix, method = 'gbm', tuneGrid = gbmGrid3)
model.gbm6
model.gbm6
model.gbm6
library(dplyr)
library(ggplot2)
library(caret)
library(doMC)
library(stringr)
registerDoMC(cores = 7)
source("script/util.R")
# import dataset
data.train = read.csv("rawData/train.csv")
data.test = read.csv("rawData/test.csv")
data.sample = read.csv("rawData/sample_submission.csv")
##################### prepocess #####################
data.train$Id <- NULL
data.test$Id <- NULL
# combine train, test
data.train$data_type = "train"
data.test$data_type = "test"
data.test$SalePrice = 0
data.all = rbind(data.train, data.test)
data.train$data_type = as.factor(data.train$data_type)
# indicates the ages of building built, sold
data.all$YearBuilt_age = abs(max(data.all$YearBuilt) - data.all$YearBuilt)
data.all$YrSold_age = abs(max(data.all$YrSold) - data.all$YrSold)
head(data.all.matrix)
head(data.all.matrix)
data.all.matrix$`(Intercept)` = NULL
library(dplyr)
library(ggplot2)
library(caret)
library(doMC)
library(stringr)
registerDoMC(cores = 7)
source("script/util.R")
# import dataset
data.train = read.csv("rawData/train.csv")
data.test = read.csv("rawData/test.csv")
data.sample = read.csv("rawData/sample_submission.csv")
##################### prepocess #####################
data.train$Id <- NULL
data.test$Id <- NULL
# combine train, test
data.train$data_type = "train"
data.test$data_type = "test"
data.test$SalePrice = 0
data.all = rbind(data.train, data.test)
data.train$data_type = as.factor(data.train$data_type)
data.all$YearBuilt_age = abs(max(data.all$YearBuilt) - data.all$YearBuilt)
data.all$YrSold_age = abs(max(data.all$YrSold) - data.all$YrSold)
# factorize
data.all$MSSubClass = as.factor(data.all$MSSubClass)
data.all$YearBuilt = as.factor(data.all$YearBuilt)
data.all$YrSold = as.factor(data.all$YrSold)
data.all$GarageYrBlt = as.factor(data.all$GarageYrBlt)
# convert NAs to factor
data.all = convert_na_to_factor(data.all)
# add number of nones
data.all$num_none = get_number_none(data.all)
data.all$pool_exist = as.factor(data.all$PoolArea != 0)
data.all$garage_exist = as.factor(data.all$GarageArea != 0)
data.all$masVnrArea_exist = as.factor(data.all$MasVnrArea != 0)
data.all$LotArea = log(data.all$LotArea + 1)
data.all$GrLivArea = log(data.all$GrLivArea + 1)
data.all$SalePrice = log(data.all$SalePrice + 1)
data_type = data.all$data_type
data.all$data_type = NULL
data.all.matrix = as.data.frame(model.matrix( ~ ., data = data.all))
data.all.matrix$`(Intercept)` = NULL
data.all.matrix$data_type = data_type
data.train.matrix <- filter(data.all.matrix, data_type == "train")
data.train.matrix$data_type = NULL
data.test.matrix <- filter(data.all.matrix, data_type == "test")
data.test.matrix$data_type = NULL
dim(data.train.matrix)
dim(data.train.matrix)
range(data.train.matrix$SalePrice)
?range
?quantile()
quantile(data.train.matrix$SalePrice)
library(dplyr)
library(caret)
library(ggplot2)
library(doMC)
library(stringr)
registerDoMC(cores = 7)
source("script/util.R")
# import dataset
data.train = read.csv("rawData/train.csv")
data.test = read.csv("rawData/test.csv")
data.sample = read.csv("rawData/sample_submission.csv")
colnames(data.train)
colnames(data.train)
str(data.train)
str(data.train)
library(dplyr)
library(ggplot2)
library(caret)
library(doMC)
library(stringr)
registerDoMC(cores = 7)
source("script/util.R")
# import dataset
data.train = read.csv("rawData/train.csv")
data.test = read.csv("rawData/test.csv")
data.sample = read.csv("rawData/sample_submission.csv")
##################### prepocess #####################
data.train$Id <- NULL
data.test$Id <- NULL
# combine train, test
data.train$data_type = "train"
library(dplyr)
library(ggplot2)
library(caret)
library(doMC)
library(stringr)
registerDoMC(cores = 7)
source("script/util.R")
# import dataset
data.train = read.csv("rawData/train.csv")
data.test = read.csv("rawData/test.csv")
data.sample = read.csv("rawData/sample_submission.csv")
##################### prepocess #####################
data.train$Id <- NULL
data.test$Id <- NULL
data.train
head(data.train)
model.gbm7 = train(SalePrice ~., data =  data.train, method = 'gbm', tuneGrid = gbmGrid3)
data.train.matrix <- filter(data.all.matrix, data_type == "train")
data.train.matrix$data_type = NULL
data.test.matrix <- filter(data.all.matrix, data_type == "test")
data.test.matrix$data_type = NULL
library(dplyr)
library(ggplot2)
library(caret)
library(doMC)
registerDoMC(cores = 7)
library(stringr)
source("script/util.R")
# import dataset
data.train = read.csv("rawData/train.csv")
data.test = read.csv("rawData/test.csv")
data.sample = read.csv("rawData/sample_submission.csv")
##################### prepocess #####################
data.train$Id <- NULL
data.test$Id <- NULL
# combine train, test
data.train$data_type = "train"
data.test$data_type = "test"
data.test$SalePrice = 0
data.all = rbind(data.train, data.test)
# indicates the ages of building built, sold
data.train$data_type = as.factor(data.train$data_type)
data.all$YearBuilt_age = abs(max(data.all$YearBuilt) - data.all$YearBuilt)
data.all$YrSold_age = abs(max(data.all$YrSold) - data.all$YrSold)
data.all$MSSubClass = as.factor(data.all$MSSubClass)
# factorize
data.all$YearBuilt = as.factor(data.all$YearBuilt)
data.all$GarageYrBlt = as.factor(data.all$GarageYrBlt)
data.all$YrSold = as.factor(data.all$YrSold)
# convert NAs to factor
data.all = convert_na_to_factor(data.all)
# add number of nones
data.all$num_none = get_number_none(data.all)
data.all$pool_exist = as.factor(data.all$PoolArea != 0)
data.all$masVnrArea_exist = as.factor(data.all$MasVnrArea != 0)
data.all$garage_exist = as.factor(data.all$GarageArea != 0)
# set.seed(11)
# # kmeans using areas
# data.model.kmeans = kmeans(scaled_data, centers = 10)
# data.area <- select(data.all, LotArea, GrLivArea)
# scaled_data = as.data.frame(scale(data.area))
#
# data.all$cluster <- as.factor(data.model.kmeans$cluster)
# scaled_data$cluster <- as.factor(data.model.kmeans$cluster)
#
# data.all$cluster_dist = 0
# for (i in 1:nrow(data.all)) {
#
#   data.all$cluster_dist[i] = dist(rbind( select(scaled_data[i, ], -cluster), data.model.kmeans$centers[scaled_data[i, ]$cluster, ] ))
#
# }
# add log term for area related predictors
data.all$LotArea = log(data.all$LotArea + 1)
data.all$GrLivArea = log(data.all$GrLivArea + 1)
data.all$SalePrice = log(data.all$SalePrice + 1)
data_type = data.all$data_type
data.all$data_type = NULL
data.all.matrix = as.data.frame(model.matrix( ~ ., data = data.all))
data.all.matrix$`(Intercept)` = NULL
data.all.matrix$data_type = data_type
head(data.all)
first_submission = read.csv("submission/tmp.csv")
second_submission = read.csv("submission/15th.csv")
first_submission
first_submission$SalePrice <- first_submission$SalePrice * 0.8 + second_submission$SalePrice * 0.2
head(first_submission)
head(first_submission)
write.csv(first_submission, "16th.csv")
write.csv(first_submission, "16th.csv", row.names = F)
write.csv(first_submission, "submission/16th.csv", row.names = F)
