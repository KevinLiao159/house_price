registerDoMC(cores = 7)
source("script/util.R")
# import dataset
data.train = read.csv("rawData/train.csv")
data.test = read.csv("rawData/test.csv")
data.sample = read.csv("rawData/sample_submission.csv")
##################### prepocess #####################
data.train$Id <- NULL
data.test$Id <- NULL
# add predictor called data_type
data.train$data_type = "train"
data.test$data_type = "test"
data.test$SalePrice = 0
data.train$SalePrice = log(data.train$SalePrice + 1)
# remove outliers 17 points
data.train = filter(data.train, 10.91511 < SalePrice, SalePrice < 13.17509) %>% dim
# combine train, test
data.all = rbind(data.train, data.test)
warning()
warnings()
library(dplyr)
library(ggplot2)
library(caret)
library(doMC)
library(stringr)
registerDoMC(cores = 7)
source("script/util.R")
# import dataset
data.train = read.csv("rawData/train.csv")
data.test = read.csv("rawData/test.csv")
data.sample = read.csv("rawData/sample_submission.csv")
##################### prepocess #####################
data.train$Id <- NULL
data.test$Id <- NULL
# add predictor called data_type
data.train$data_type = "train"
data.test$data_type = "test"
data.test$SalePrice = 0
data.train$SalePrice = log(data.train$SalePrice + 1)
# remove outliers 17 points
data.train = filter(data.train, 10.91511 < SalePrice, SalePrice < 13.17509)
# combine train, test
data.all = rbind(data.train, data.test)
data.train$data_type = as.factor(data.train$data_type)
data.all$YrSold_YearBuilt = data.all$YrSold - data.all$YearBuilt
# Remodel - built
data.all$YearRemodel_YearBuilt = data.all$YearRemodAdd - data.all$YearBuilt
# sold - remodel
data.all$YrSold_YearRemodel = data.all$YrSold - data.all$YearRemodAdd
# factorize
data.all$MSSubClass = as.factor(data.all$MSSubClass)
data.all$YearBuilt = as.factor(data.all$YearBuilt)
data.all$YrSold = as.factor(data.all$YrSold)
data.all$MoSold = as.factor(data.all$MoSold)
data.all$GarageYrBlt = as.factor(data.all$GarageYrBlt)
data.all = convert_na_to_factor(data.all)
# add number of nones
data.all$num_none = get_number_none(data.all)
data.all$pool_exist = as.factor(data.all$PoolArea != 0)
data.all$garage_exist = as.factor(data.all$GarageArea != 0)
data.all$masVnrArea_exist = as.factor(data.all$MasVnrArea != 0)
data.all$LotArea = log(data.all$LotArea + 1)
data.all$GrLivArea = log(data.all$GrLivArea + 1)
data_type = data.all$data_type
data.all$data_type = NULL
data.all.matrix = as.data.frame(model.matrix( ~ ., data = data.all))
data.all.matrix$`(Intercept)` = NULL
data.all.matrix$data_type = data_type
library(caret)
library(glmnet)
library(xgboost)
data.train.matrix <- filter(data.all.matrix, data_type == "train")
data.train.matrix$data_type = NULL
data.test.matrix <- filter(data.all.matrix, data_type == "test")
data.test.matrix$data_type = NULL
model.gbm<- train(SalePrice ~., data =  data.train.matrix, method = 'gbm')
model.gbm
predict(model.gbm, data.test.matrix)
model.gbm.pred = predict(model.gbm, data.test.matrix)
data.test.matrix
data.test.matrix$SalePrice
train_index = createDataPartition(SalePrice, p = 0.8, list = FALSE)
train_index = createDataPartition(data.all.matrix$SalePrice, p = 0.8, list = FALSE)
data.train.matrix[train_index, ]
data.train.matrix = data.train.matrix[train_index, ]
data.validation.matrix = data.validation.matrix[train_index, ]
data.validation.matrix = data.train.matrix[-train_index, ]
data.train.matrix <- filter(data.all.matrix, data_type == "train")
data.train.matrix$data_type = NULL
train_index = createDataPartition(data.all.matrix$SalePrice, p = 0.8, list = FALSE)
data.train.matrix = data.train.matrix[train_index, ]
data.validation.matrix = data.train.matrix[-train_index, ]
data.test.matrix <- filter(data.all.matrix, data_type == "test")
data.test.matrix$data_type = NULL
model.gbm<- train(SalePrice ~., data =  data.train.matrix, method = 'gbm')
data.train.matrix <- filter(data.all.matrix, data_type == "train")
data.train.matrix$data_type = NULL
train_index = createDataPartition(data.all.matrix$SalePrice, p = 0.8, list = FALSE)
data.train.matrix = data.train.matrix[train_index, ]
data.validation.matrix = data.train.matrix[-train_index, ]
dim(data.train.matrix)
dim(data.validation.matrix)
model.gbm<- train(SalePrice ~., data =  data.train.matrix, method = 'gbm')
model.gbm
model.gbm2 <- train(SalePrice ~., data =  data.train.matrix, method = 'gbm')
model.gbm2
str(data.train.matrix)
summary(data.train.matrix)
data.train.matrix
tail(data.train.matrix)
data.train.matrix <- filter(data.all.matrix, data_type == "train")
summary(data.train.matrix)
data.all.matrix = as.data.frame(data.all.matrix)
data.train.matrix <- filter(data.all.matrix, data_type == "train")
data.train.matrix$data_type = NULL
train_index = createDataPartition(data.all.matrix$SalePrice, p = 0.8, list = FALSE)
data.train.matrix = data.train.matrix[train_index, ]
data.validation.matrix = data.train.matrix[-train_index, ]
summary(data.train.matrix)
train_index
train_index = createDataPartition(data.all.matrix$SalePrice, p = 0.8, list = FALSE)
train_index
train_index
dim(data.all.matrix)
library(dplyr)
library(ggplot2)
library(caret)
library(doMC)
library(stringr)
registerDoMC(cores = 7)
source("script/util.R")
# import dataset
data.train = read.csv("rawData/train.csv")
data.test = read.csv("rawData/test.csv")
data.sample = read.csv("rawData/sample_submission.csv")
##################### prepocess #####################
data.train$Id <- NULL
data.test$Id <- NULL
# add predictor called data_type
data.train$data_type = "train"
data.test$data_type = "test"
data.test$SalePrice = 0
# Scale log transform
data.train$SalePrice = log(data.train$SalePrice + 1)
# remove outliers 17 points
data.train = filter(data.train, 10.91511 < SalePrice, SalePrice < 13.17509)
# combine train, test
data.all = rbind(data.train, data.test)
data.train$data_type = as.factor(data.train$data_type)
# indicates the ages of building built, sold
# data.all$YearBuilt_age = abs(max(data.all$YearBuilt) - data.all$YearBuilt)
# data.all$YrSold_age = abs(max(data.all$YrSold) - data.all$YrSold)
# sold - built
data.all$YrSold_YearBuilt = data.all$YrSold - data.all$YearBuilt
# Remodel - built
data.all$YearRemodel_YearBuilt = data.all$YearRemodAdd - data.all$YearBuilt
# sold - remodel
data.all$YrSold_YearRemodel = data.all$YrSold - data.all$YearRemodAdd
# factorize
data.all$MSSubClass = as.factor(data.all$MSSubClass)
data.all$YearBuilt = as.factor(data.all$YearBuilt)
data.all$YrSold = as.factor(data.all$YrSold)
data.all$MoSold = as.factor(data.all$MoSold)
data.all$GarageYrBlt = as.factor(data.all$GarageYrBlt)
# convert NAs to factor
data.all = convert_na_to_factor(data.all)
# add number of nones
data.all$num_none = get_number_none(data.all)
data.all$pool_exist = as.factor(data.all$PoolArea != 0)
data.all$garage_exist = as.factor(data.all$GarageArea != 0)
data.all$masVnrArea_exist = as.factor(data.all$MasVnrArea != 0)
# # kmeans using areas
# set.seed(11)
# data.area <- select(data.all, LotArea, GrLivArea)
# scaled_data = as.data.frame(scale(data.area))
# data.model.kmeans = kmeans(scaled_data, centers = 10)
#
# data.all$cluster <- as.factor(data.model.kmeans$cluster)
# scaled_data$cluster <- as.factor(data.model.kmeans$cluster)
#
# data.all$cluster_dist = 0
# for (i in 1:nrow(data.all)) {
#
#   data.all$cluster_dist[i] = dist(rbind( select(scaled_data[i, ], -cluster), data.model.kmeans$centers[scaled_data[i, ]$cluster, ] ))
#
# }
# add log term for area related predictors
data.all$LotArea = log(data.all$LotArea + 1)
data.all$GrLivArea = log(data.all$GrLivArea + 1)
data_type = data.all$data_type
data.all$data_type = NULL
data.all.matrix = as.data.frame(model.matrix( ~ ., data = data.all))
data.all.matrix$`(Intercept)` = NULL
data.all.matrix$data_type = data_type
dim(data.all.matrix)
data.all.matrix = as.data.frame(data.all.matrix)
data.train.matrix <- filter(data.all.matrix, data_type == "train")
data.train.matrix$data_type = NULL
dim(data.train.matrix)
train_index = createDataPartition(data.train.matrix$SalePrice, p = 0.8, list = FALSE)
data.train.matrix = data.train.matrix[train_index, ]
data.validation.matrix = data.train.matrix[-train_index, ]
data.test.matrix <- filter(data.all.matrix, data_type == "test")
data.test.matrix$data_type = NULL
model.gbm <- train(SalePrice ~., data =  data.train.matrix, method = 'gbm')
model.gbm
model.gbm.pred = predict(model.gbm, data.validation.matrix)
model.gbm.pred
data.validation.matrix$SalePrice
rbind(model.gbm.pred, data.validation.matrix$SalePrice)
data.frame(model.gbm.pred, data.validation.matrix$SalePrice)
data.frame(pred = model.gbm.pred, y=data.validation.matrix$SalePrice)
pred_y = data.frame(pred = model.gbm.pred, y=data.validation.matrix$SalePrice)
pred_y
head(pred_y)
ggplot(pred_y, aes(x = y, y= pred)) + geom_point()
ggplot(pred_y, aes(x = y, y= pred)) + geom_point() + geom_smooth()
pred_y$residual = pred_y$y - pred_y$pred
pred_y$residua
ggplot(pred_y, aes(x = residual)) + geom_histogram()
length(residual)
length(pred_y)
dim(pred_y)
ggplot(pred_y, aes(x = 1:241, y = residual)) + geom_point()
ggplot(pred_y, aes(x = 1:241, y = residual)) + geom_line()
ggplot(pred_y, aes(x = 1:241, y = residual)) + geom_line()
ggplot(pred_y, aes(x = y, y= pred)) + geom_point() + geom_smooth()
ggplot(pred_y, aes(x = 1:241, y = residual)) + geom_line()
model.gbm <- train(SalePrice ~., data =  data.train.matrix, method = 'lasso')
model.lm <- train(SalePrice ~., data =  data.train.matrix, method = 'lm')
model.lm
model.gbm.pred = predict(model.lm, data.validation.matrix)
pred_y = data.frame(pred = model.gbm.pred, y=data.validation.matrix$SalePrice)
model.lm
model.gbm.pred = predict(model.lm, data.validation.matrix)
set.seed(1000)
grid <- 10 ^ seq(10, -2, length = 100)
model.lasso.lambda <- cv.glmnet(as.matrix(select(data.train.matrix, -SalePrice)), as.matrix(data.train.matrix$SalePrice), nfolds = 10, intercept = FALSE, lambda = grid, alpha = 1)
model.lasso <- glmnet(as.matrix(select(data.train.matrix, -SalePrice)), as.matrix(data.train.matrix$SalePrice), alpha = 1, lambda = model.lasso.lambda$lambda.min)
model.lasso.pred <- predict(model.lasso,newx= as.matrix(select(data.validation.matrix, -SalePrice)),type="response",s= model.lasso.lambda.min)
set.seed(1000)
grid <- 10 ^ seq(10, -2, length = 100)
model.lasso.lambda <- cv.glmnet(as.matrix(select(data.train.matrix, -SalePrice)), as.matrix(data.train.matrix$SalePrice), nfolds = 10, intercept = FALSE, lambda = grid, alpha = 1)
model.lasso.lambda.min = model.lasso.lambda$lambda.min
model.lasso <- glmnet(as.matrix(select(data.train.matrix, -SalePrice)), as.matrix(data.train.matrix$SalePrice), alpha = 1, lambda = model.lasso.lambda.min)
model.lasso.pred <- predict(model.lasso,newx= as.matrix(select(data.validation.matrix, -SalePrice)),type="response",s= model.lasso.lambda.min)
model.lasso.pred
pred_y = data.frame(pred = model.lasso.pred, y=data.validation.matrix$SalePrice)
pred_y
ggplot(pred_y, aes(x = y, y= pred)) + geom_point() + geom_smooth()
pred_y = data.frame(pred = model.lasso.pred, y=data.validation.matrix$SalePrice)
head(pred_y)
colnames(pred_y) = c('pred', 'y')
ggplot(pred_y, aes(x = y, y= pred)) + geom_point() + geom_smooth()
ggplot(pred_y, aes(x = 1:241, y = residual)) + geom_line()
ggplot(pred_y, aes(x = y, y= pred)) + geom_point() + geom_smooth()
pred_y$residual = pred_y$y - pred_y$pred
ggplot(pred_y, aes(x = 1:241, y = residual)) + geom_line()
model.gbm <- train(SalePrice ~., data =  data.train.matrix, method = 'gbm')
ggplot(pred_y, aes(x = 1:241, y = residual)) + geom_line()
pred_y = data.frame(pred = model.gbm.pred, y=data.validation.matrix$SalePrice)
pred_y$residual = pred_y$y - pred_y$pred
ggplot(pred_y, aes(x = 1:241, y = residual)) + geom_line()
model.gbm.pred = predict(model.gbm, data.validation.matrix)
model.gbm.pred_y = data.frame(pred = model.gbm.pred, y=data.validation.matrix$SalePrice)
model.gbm.pred_y$residual = pred_y$y - pred_y$pred
model.lasso.pred <- predict(model.lasso,newx= as.matrix(select(data.validation.matrix, -SalePrice)),type="response",s= model.lasso.lambda.min)
model.lasso.pred.pred_y = data.frame(pred = model.lasso.pred, y=data.validation.matrix$SalePrice)
model.lasso.pred <- predict(model.lasso,newx= as.matrix(select(data.validation.matrix, -SalePrice)),type="response",s= model.lasso.lambda.min)
model.lasso.pred_y = data.frame(pred = model.lasso.pred, y=data.validation.matrix$SalePrice)
colnames(model.lasso.pred_y) = c('pred', 'y')
model.lasso.pred_y$residual = pred_y$y - pred_y$pred
ggplot(model.lasso.pred_y, aes(x = y, y= pred)) + geom_point() + geom_smooth()
ggplot(model.lasso.pred_y, aes(x = 1:241, y = residual)) + geom_line()
model.gbm.pred_y = data.frame(pred = model.gbm.pred, y=data.validation.matrix$SalePrice)
model.gbm.pred_y$residual = pred_y$y - pred_y$pred
ggplot(model.gbm.pred_y, aes(x = y, y= pred)) + geom_point() + geom_smooth()
ggplot(model.gbm.pred_y, aes(x = 1:241, y = residual)) + geom_line()
model.gbm.pred_y
model.gbm.pred_y$model = 'gbm'
model.lasso.pred_y$model = 'lasso'
rbind(model.gbm.pred_y, model.lasso.pred_y)
combined = rbind(model.gbm.pred_y, model.lasso.pred_y)
combined$model = as.factor(combined$model)
ggplot(combined, aes(x = 1:241, y = residual, color = 'model')) + geom_line()
head(combined)
ggplot(combined, aes(x = 1:241, y = residual, color = model)) + geom_line()
ggplot(combined, aes(x = 1:241, y = residual, fill = model)) + geom_line()
ggplot(combined, aes(x = 1:241, y = residual, fill = as.factor(model))) + geom_line()
ggplot(combined, aes(x = 1:241, y = residual, color = as.factor(model))) + geom_line()
str(combined)
ggplot(combined, aes(x = 1:241, y = residual, colour = model)) + geom_line()
ggplot(combined, aes(x = 1:241, y = residual, colour = model)) + geom_point()
ggplot(combined, aes(x= residual, colour = model)) + geom_point()
ggplot(combined, aes(x= residual, colour = model)) + geom_line()
dim(model)
dim(model.gbm.pred_y)
ggplot(model.gbm.pred_y, aes(x = 1:241, y = residual)) + geom_line()
ggplot(model.gbm.pred_y, aes(x = 1:241, y = residual, color = 'red')) + geom_line()
ggplot(model.gbm.pred_y)  + geom_line(aes(x = 1:241, y = residual, color = 'red'))
ggplot() + geom_line(model.gbm.pred_y, aes(x = 1:241, y = residual, color = 'red'))
library(reshape2)
library(ggplot2)
x <- seq(1, 5, length = 100)
y <- replicate(10, sin(2 * pi * x) + rnorm(100, 0, 0.3), "list")
z <- melt(z)
z <- replicate(10, sin(2 * pi * x) + rnorm(100, 5, 0.3), "list")
y <- melt(y)
df <- data.frame(x = y$Var1, rep = y$Var2, y = y$value, z = z$value)
dat <- melt(df, id = c("x", "rep"))
library(reshape2)
library(ggplot2)
x <- seq(1, 5, length = 100)
y <- replicate(10, sin(2 * pi * x) + rnorm(100, 0, 0.3), "list")
z <- replicate(10, sin(2 * pi * x) + rnorm(100, 5, 0.3), "list")
y <- melt(y)
z <- melt(z)
df <- data.frame(x = y$Var1, rep = y$Var2, y = y$value, z = z$value)
dat <- melt(df, id = c("x", "rep"))
dat
head(dat)
dat
head(dat)
dat
dat
nrow(model.gbm.pred_y)
model.gbm.pred_y$index = 1:nrow(model.gbm.pred_y)
nrow(model.gbm.pred_y)model.gbm.pred_y
model.gbm.pred_y
model.lasso.pred_y$index = 1:nrow(model.lasso.pred_y)
combined = rbind(model.gbm.pred_y, model.lasso.pred_y)
head(combined)
combined
ggplot(combined) + geom_line(aes(x = index, y = residual, color = 'red'))
ggplot(combined, aes(x = index, y = residual, color = model)) + geom_line()
combined
model.lasso.pred <- predict(model.lasso,newx= as.matrix(select(data.validation.matrix, -SalePrice)),type="response",s= model.lasso.lambda.min)
model.lasso.pred_y = data.frame(pred = model.lasso.pred, y=data.validation.matrix$SalePrice)
model.lasso.pred_y$model = 'lasso'
model.lasso.pred_y$index = 1:nrow(model.lasso.pred_y)
colnames(model.lasso.pred_y) = c('pred', 'y')
model.lasso.pred_y$residual = model.lasso.pred_y$y - model.lasso.pred_y$pred
ggplot(model.lasso.pred_y, aes(x = y, y= pred)) + geom_point() + geom_smooth()
ggplot(model.lasso.pred_y, aes(x = 1:241, y = residual)) + geom_line()
model.gbm.pred = predict(model.gbm, data.validation.matrix)
model.gbm.pred_y = data.frame(pred = model.gbm.pred, y=data.validation.matrix$SalePrice)
model.gbm.pred_y$residual = model.gbm.pred_y$y - model.gbm.pred_y$pred
model.gbm.pred_y$model = 'gbm'
model.gbm.pred_y$index = 1:nrow(model.gbm.pred_y)
combined = rbind(model.gbm.pred_y, model.lasso.pred_y)
combined = rbind(model.gbm.pred_y, model.lasso.pred_y)
model.gbm.pred_y
head(model.gbm.pred_y)
head(model.lasso.pred_y)
model.lasso.pred <- predict(model.lasso,newx= as.matrix(select(data.validation.matrix, -SalePrice)),type="response",s= model.lasso.lambda.min)
model.lasso.pred_y = data.frame(pred = model.lasso.pred, y=data.validation.matrix$SalePrice)
model.lasso.pred_y$model = 'lasso'
model.lasso.pred_y$index = 1:nrow(model.lasso.pred_y)
head(model.lasso.pred_y)
model.lasso.pred <- predict(model.lasso,newx= as.matrix(select(data.validation.matrix, -SalePrice)),type="response",s= model.lasso.lambda.min)
model.lasso.pred_y = data.frame(pred = model.lasso.pred, y=data.validation.matrix$SalePrice)
colnames(model.lasso.pred_y) = c('pred', 'y')
model.lasso.pred_y$model = 'lasso'
model.lasso.pred_y$index = 1:nrow(model.lasso.pred_y)
model.lasso.pred_y$residual = model.lasso.pred_y$y - model.lasso.pred_y$pred
ggplot(model.lasso.pred_y, aes(x = y, y= pred)) + geom_point() + geom_smooth()
ggplot(model.lasso.pred_y, aes(x = 1:241, y = residual)) + geom_line()
head(model.lasso.pred_y)
combined = rbind(model.gbm.pred_y, model.lasso.pred_y)
combined$model = as.factor(combined$model)
ggplot(combined, aes(x = index, y = residual, color = model)) + geom_line()
ggplot(combined, aes(x = index, y = residual, color = model)) + geom_line()
grid <- 10 ^ seq(10, -2, length = 100)
grid
grid
seq(0, 1, length = 1000)
grid <- seq(0, 1, length = 1000)
model.lasso.lambda <- cv.glmnet(as.matrix(select(data.train.matrix, -SalePrice)), as.matrix(data.train.matrix$SalePrice), nfolds = 10, intercept = FALSE, lambda = grid, alpha = 1)
plot(model.lasso.lambda)
model.lasso.lambda.min = model.lasso.lambda$lambda.min
model.lasso <- glmnet(as.matrix(select(data.train.matrix, -SalePrice)), as.matrix(data.train.matrix$SalePrice), alpha = 1, lambda = model.lasso.lambda.min)
model.lasso.pred <- predict(model.lasso,newx= as.matrix(select(data.validation.matrix, -SalePrice)),type="response",s= model.lasso.lambda.min)
model.lasso.pred_y = data.frame(pred = model.lasso.pred, y=data.validation.matrix$SalePrice)
colnames(model.lasso.pred_y) = c('pred', 'y')
model.lasso.pred_y$model = 'lasso'
model.lasso.pred_y$index = 1:nrow(model.lasso.pred_y)
model.lasso.pred_y$residual = model.lasso.pred_y$y - model.lasso.pred_y$pred
ggplot(model.lasso.pred_y, aes(x = y, y= pred)) + geom_point() + geom_smooth()
ggplot(model.lasso.pred_y, aes(x = 1:241, y = residual)) + geom_line()
combined = rbind(model.gbm.pred_y, model.lasso.pred_y)
combined$model = as.factor(combined$model)
ggplot(combined, aes(x = index, y = residual, color = model)) + geom_line()
scale(data.train.matrix)
tmp = scale(data.train.matrix)
tmp
tmp
dim(tmp)
data.train.matrix = scale(data.train.matrix)
model.lasso <- glmnet(as.matrix(select(data.train.matrix, -SalePrice)), as.matrix(data.train.matrix$SalePrice), alpha = 1, lambda = model.lasso.lambda.min)
glmnet
?glmnet
# split into train, test matrix
data.all.matrix = as.data.frame(data.all.matrix)
data.train.matrix <- filter(data.all.matrix, data_type == "train")
data.train.matrix$data_type = NULL
train_index = createDataPartition(data.train.matrix$SalePrice, p = 0.8, list = FALSE)
data.train.matrix = data.train.matrix[train_index, ]
data.validation.matrix = data.train.matrix[-train_index, ]
data.test.matrix <- filter(data.all.matrix, data_type == "test")
data.all.matrix = as.data.frame(data.all.matrix)
data.train.matrix <- filter(data.all.matrix, data_type == "train")
data.train.matrix$data_type = NULL
set.seed(1000)
train_index = createDataPartition(data.train.matrix$SalePrice, p = 0.8, list = FALSE)
data.train.matrix = data.train.matrix[train_index, ]
data.validation.matrix = data.train.matrix[-train_index, ]
data.test.matrix <- filter(data.all.matrix, data_type == "test")
data.test.matrix$data_type = NULL
grid <- seq(0, 1, length = 1000)
model.lasso.lambda.min
model.gbm
gbmGrid3 <- expand.grid(interaction.depth = c(1, 3, 5),
n.trees = c(4, 5, 6, 7)*50,
shrinkage = c(0.1, 0.2),
n.minobsinnode = c(10, 15, 20))
model.gbm <- train(SalePrice ~., data =  data.train.matrix, method = 'gbm', tuneGrid = gbmGrid3)
model.gbm
grid <- seq(0, 4, length = 1000)
model.lasso.lambda <- cv.glmnet(as.matrix(select(data.train.matrix, -SalePrice)), as.matrix(data.train.matrix$SalePrice), nfolds = 10, intercept = FALSE, lambda = grid, alpha = 1)
model.lasso.lambda <- cv.glmnet(as.matrix(select(data.train.matrix, -SalePrice)), as.matrix(data.train.matrix$SalePrice), nfolds = 10, intercept = FALSE, lambda = grid, alpha = 0)
model.ridge.lambda.min = model.lasso.lambda$lambda.min
model.ridge <- glmnet(as.matrix(select(data.train.matrix, -SalePrice)), as.matrix(data.train.matrix$SalePrice), alpha = 0, lambda = model.ridge.lambda.min)
model.ridge.pred <- predict(model.ridge,newx= as.matrix(select(data.validation.matrix, -SalePrice)),type="response",s= model.ridge.lambda.min)
model.ridge.pred_y = data.frame(pred = model.ridge.pred, y=data.validation.matrix$SalePrice)
colnames(model.ridge.pred_y) = c('pred', 'y')
model.ridge.pred_y$model = 'ridge'
model.ridge.pred_y$index = 1:nrow(model.ridge.pred_y)
model.ridge.pred_y$residual = model.ridge.pred_y$y - model.ridge.pred_y$pred
model.ridge.pred_y$residual
model.ridge.pred_y$residual == model.lasso.pred_y$residual
combined = rbind(model.gbm.pred_y, model.lasso.pred_y, model.ridge.pred_y)
combined$model = as.factor(combined$model)
ggplot(combined, aes(x = index, y = residual, color = model)) + geom_line()
varImp(model.gbm)
plot(model.gbm)
plot(varImp(model.gbm))
varImp(model.gbm)
plot(model.gbm)
plot(varImp(model.gbm))
data.validation.matrix
arrange(data.validation.matrix, SalePrice)
arrange(data.validation.matrix, SalePrice) %>% head()
data.validation.matrix = arrange(data.validation.matrix, SalePrice)
head(data.validation.matrix)
model.lasso.pred <- predict(model.lasso,newx= as.matrix(select(data.validation.matrix, -SalePrice)),type="response",s= model.lasso.lambda.min)
model.lasso.pred_y = data.frame(pred = model.lasso.pred, y=data.validation.matrix$SalePrice)
colnames(model.lasso.pred_y) = c('pred', 'y')
model.lasso.pred_y$model = 'lasso'
model.lasso.pred_y$index = 1:nrow(model.lasso.pred_y)
model.lasso.pred_y$residual = model.lasso.pred_y$y - model.lasso.pred_y$pred
ggplot(model.lasso.pred_y, aes(x = y, y= pred)) + geom_point() + geom_smooth()
ggplot(model.lasso.pred_y, aes(x = 1:241, y = residual)) + geom_line()
model.lasso.pred_y$index = 1:nrow(model.lasso.pred_y)
model.lasso.pred <- predict(model.lasso,newx= as.matrix(select(data.validation.matrix, -SalePrice)),type="response",s= model.lasso.lambda.min)
model.lasso.pred_y = data.frame(pred = model.lasso.pred, y=data.validation.matrix$SalePrice)
colnames(model.lasso.pred_y) = c('pred', 'y')
model.lasso.pred_y$model = 'lasso'
model.lasso.pred_y$index = 1:nrow(model.lasso.pred_y)
model.lasso.pred_y$residual = model.lasso.pred_y$y - model.lasso.pred_y$pred
ggplot(model.lasso.pred_y, aes(x = 1:241, y = residual)) + geom_line()
model.ridge.pred <- predict(model.ridge,newx= as.matrix(select(data.validation.matrix, -SalePrice)),type="response",s= model.ridge.lambda.min)
model.ridge.pred_y = data.frame(pred = model.ridge.pred, y=data.validation.matrix$SalePrice)
colnames(model.ridge.pred_y) = c('pred', 'y')
model.ridge.pred_y$model = 'ridge'
model.ridge.pred_y$index = 1:nrow(model.ridge.pred_y)
model.ridge.pred_y$residual = model.ridge.pred_y$y - model.ridge.pred_y$pred
ggplot(model.ridge.pred_y, aes(x = y, y= pred)) + geom_point() + geom_smooth()
model.gbm.pred = predict(model.gbm, data.validation.matrix)
model.gbm.pred_y = data.frame(pred = model.gbm.pred, y=data.validation.matrix$SalePrice)
model.gbm.pred_y$residual = model.gbm.pred_y$y - model.gbm.pred_y$pred
model.gbm.pred_y$model = 'gbm'
model.gbm.pred_y$index = 1:nrow(model.gbm.pred_y)
ggplot(model.gbm.pred_y, aes(x = y, y= pred)) + geom_point() + geom_smooth()
ggplot(model.gbm.pred_y, aes(x = 1:241, y = residual)) + geom_line()
model.gbm.pred_y
combined = rbind(model.gbm.pred_y, model.lasso.pred_y, model.ridge.pred_y)
ggplot(combined, aes(x = index, y = residual, color = model)) + geom_line()
ggplot(model.gbm.pred_y, aes(x = 1:241, y = residual)) + geom_line()
model.gbm.pred_y
1:nrow(model.gbm.pred)
1:nrow(model.gbm.pred)
model.gbm.pred = predict(model.gbm, data.validation.matrix)
model.gbm.pred_y = data.frame(pred = model.gbm.pred, y=data.validation.matrix$SalePrice)
model.gbm.pred_y$residual = model.gbm.pred_y$y - model.gbm.pred_y$pred
model.gbm.pred_y$model = 'gbm'
model.gbm.pred_y$index = 1:nrow(model.gbm.pred)
nrow(model.gbm.pred_y)
model.gbm.pred_y$index = 1:nrow(model.gbm.pred_y)
model.gbm.pred_y
dim(model.gbm.pred_y)
model.gbm.pred_y$index = 1:nrow(model.gbm.pred_y)
ggplot(model.gbm.pred_y, aes(x = 1:224, y = residual)) + geom_line()
model.gbm.pred_y
ggplot(model.ridge.pred_y, aes(x = 1:nrow(model.ridge.pred_y), y = residual)) + geom_line()
ggplot(model.ridge.pred_y, aes(x = 1:nrow(model.ridge.pred_y), y = residual)) + geom_line()
ggplot(model.lasso.pred_y, aes(x = 1:nrow(model.lasso.pred_y), y = residual)) + geom_line()
combined = rbind(model.lasso.pred_y, model.ridge.pred_y)
combined$model = as.factor(combined$model)
ggplot(combined, aes(x = index, y = residual, color = model)) + geom_line()
combined = rbind(model.gbm.pred_y, model.ridge.pred_y)
combined$model = as.factor(combined$model)
ggplot(combined, aes(x = index, y = residual, color = model)) + geom_line()
